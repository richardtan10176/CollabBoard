version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    build: ./psql
    container_name: collabboard-postgres-prod
    restart: unless-stopped
    environment:
      POSTGRES_DB: collabboard
      POSTGRES_USER: collabboard
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./psql/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - collabboard-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U collabboard -d collabboard"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    # Don't expose port in production - only internal access
    # ports:
    #   - "5433:5432"

  # Express Backend API
  backend:
    build: ./backend
    container_name: collabboard-backend-prod
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3001
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: collabboard
      DB_USER: collabboard
      DB_PASSWORD: ${DB_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRES_IN: 24h
      FRONTEND_URL: ${FRONTEND_URL}
      RATE_LIMIT_WINDOW_MS: 900000
      RATE_LIMIT_MAX_REQUESTS: 100
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - collabboard-network
    healthcheck:
      test: ["CMD", "node", "-e", "const http = require('http'); const options = { host: 'localhost', port: 3001, path: '/health', timeout: 2000 }; const req = http.request(options, (res) => { if (res.statusCode === 200) process.exit(0); else process.exit(1); }); req.on('error', () => process.exit(1)); req.end();"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    # Don't expose port in production - only internal access
    # ports:
    #   - "3001:3001"

  # Next.js Frontend
  frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile
    container_name: collabboard-frontend-prod
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3000
      API_URL: http://backend:3001
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
      NEXT_PUBLIC_WS_URL: ${NEXT_PUBLIC_WS_URL}
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - collabboard-network
    healthcheck:
      test: ["CMD", "sh", "-c", "wget --no-verbose --tries=1 --spider http://127.0.0.1:3000 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    # Don't expose port in production - only internal access
    # ports:
    #   - "3000:3000"

  # NGINX Reverse Proxy
  nginx:
    build: ./nginx
    container_name: collabboard-nginx-prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - frontend
      - backend
    networks:
      - collabboard-network
    volumes:
      - nginx_ssl:/etc/nginx/ssl
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

# Named volumes for data persistence
volumes:
  postgres_data:
    driver: local
  nginx_ssl:
    driver: local

# Custom network for inter-service communication
networks:
  collabboard-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16
